####安装docker
yum -y install docker 
# docker开启启动
systemctl  enable docker.service

####安装docker-compose
# 第一种方法
sudo curl -L https://github.com/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# 如果太慢使用国内镜像
curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

#第二种方法
yum -y install epel-release
yum -y install python-pip
pip install docker-compose
待安装完成后，执行查询版本的命令，即可安装docker-compose
docker-compose version

#### 启动docker
systemctl start docker
##### 进入文件路径
##### 启动docker-compose
docker-compose up

docker 启动Mysql
docker run -e MSYQL_ROOT_PASSWORD=admin --name mysql_bname -v /data/mysql/data:/var/lib/mysql -p 3306:3306 -d mysql:5.6

-e MSYQL_ROOT_PASSWORD=admin 初始化mysql数据库root账户 密码
--name mysql_bname 重命名容器名称
-v /data/mysql/data:/var/lib/mysql 将容器/var/lib/mysql 挂载到 /data/mysql/data 
-p 3306:3306 将容器端口映射到本地端口
-d mysql:5.6 启动镜像

docker run -p 80:80 -v /www/:/usr/local/apache2/htdocs/ -v /www/conf/httpd.conf:/usr/local/apache2/conf/httpd.conf -v /usr/local/apache2/logs/ -d httpd


追加CentOS 6.5的epel及remi源。

# rpm -Uvh http://ftp.iij.ad.jp/pub/linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
# rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
以下是CentOS 7.0的源。

yum install epel-release
rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm

通过Dockerfile 生成 apache + php + mysql

docker build -t server:v2 github.com/AprilOneDay/docker_php

docker build -t php:v1 github.com/AprilOneDay/docker_php

docker run -d --name test_apache-php  -e MYSQL_ADDR=74.121.150.93:3306 -p 80:80 server:v1

想要删除untagged images，也就是那些id为<None>的image的话可以用

docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
docker rmi $(docker images -q)

关闭所有正在运行容器
docker ps | awk  '{print $1}' | xargs docker stop
docker rm $(docker ps -a -q)
docker rmi docker_nginx

查询容器ip
docker inspect  容器名称/id



docker stop test_apache-php
docker rm test_apache-php
docker port  test_apache-php 80
docker exec -it test_apache-php /bin/bash
docker exec -it php /bin/bash
docker exec -it httpd /bin/bash
docker exec -it mysql /bin/bash
docker exec -it nginx /bin/bash

mysql -uroot  -p1q2w3e4r
mysql -h172.17.0.2 -P3306 -uroot  -p1q2w3e4r
mysql -h74.121.150.93 -P3306 -uroot  -p1q2w3e4r
select database();

cd /
cd var/www/html
vi index.php

#linux 端口查看
lsof -i tcp:443

# 从容器拷贝文件到本地
docker cp apache2:/root/etc//local/apache2/conf/httpd.conf ~/www/apache2/conf/httpd.conf
docker cp apache2:/usr/local/apache2/logs/ ~/www/apache2/logs
docker cp apache2:/usr/local/apache2/htdocs/ ~/www/src

docker cp php:/usr/local/php ~/www/php
docker cp apache:/usr/local/apache2/ ~/www/
docker cp mysql:/etc/mysql/ ~/www/
docker cp mysql:/var/lib/mysql ~/www/data/
docker cp nginx:/etc/nginx ~/www/test/nginx/

# 从本地拷文件到docker容器里面
docker cp /www/nginx/conf/mime.types nginx:/etc/nginx/mime.types

容器时间同步
docker cp /etc/localtime php:/etc/localtime
docker run --name <name> -v /etc/localtime:/etc/localtime:ro

#vim安装
apt-get update
apt-get install vim
apt-get install vim-gnome
#---end

docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7

hwclock --set --date '019-07-01 15:50:20' 

# 查看Linux系统版本的命令
cat /etc/issue
uname -a


su -c "setenforce 0"
docker ps | awk  '{print $1}' | xargs docker stop
docker rm $(docker ps -a -q)
docker rmi docker_mysql
docker rmi docker_slave1
cd
rm -rf docker 
git clone https://github.com/AprilOneDay/docker.git
cd docker
docker-compose up
docker exec -it php /bin/bash
chmod -R 777 /var/www/html/dati/data
chmod -R 777 /var/www/html/dati/public

# 删除正在进行的容器
docker ps | awk  '{print $1}' | xargs docker stop
docker rm $(docker ps -a -q)
cd
cd docker
git pull
docker-compose up -d
docker exec -it nginx /bin/bash

# 修改写入权限
docker exec -it php /bin/bash
chmod -R 777 /var/www/html/sowenan/data
chmod -R 777 /var/www/html/sowenan/public
chmod -R 777 /var/www/html/moershi/moershi/appliaction/tools/vendor/captcha

exit

# 修改mysql密码
docker exec -it mysql /bin/bash
mysql -uroot -p1qq2ww3ee4rr
use  mysql;
update  user  set  authentication_string  =  password('cnwtoo_kdqc123') where  user='root';
update  user  set  user  =  'kdqc' where  user='root';
exit;exit;
docker restart mysql;
docker restart nginx;

docker-compose up -d
docker exec -it mysql /bin/bash
docker exec -it svn /bin/sh
mysqldump -hlocalhost -usiyue -psiyue1q2w3e4r --databases blog > /usr/local/work/blog.sql

cd docker 
git pull
docker-compose up
#docker mysql主从

docker run --name mysqlsrv -v ~/docker/mysqlsrv/data:/var/lib/mysql -v ~/docker/mysqlsrv/conf/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -p 3316:3306 mysql:5.7

CHANGE MASTER TO MASTER_HOST='74.121.150.93',MASTER_USER='siyue',MASTER_PASSWORD='siyue1q2w3e4r',MASTER_LOG_FILE='mysql-bin.000004',MASTER_LOG_POS=2552;

俺的centos vps上面不知道添加了多少个账户，今天想清理一下，但是以前还未查看过linux用户列表，google了一下，找到方便的放：
一般情况下是

# 容器互连
docker run -it --rm --network mynetwork svn

cat /etc/passwd 可以查看所有用户的列表
w 可以查看当前活跃的用户列表
cat /etc/group 查看用户组

但是这样出来的结果一大堆，看起来嘿负责，于是继续google
找到个简明的layout命令

cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F":" '{ print $1"|"$3"|"$4 }'|more

这样一来，show出来的就只是用户列表和一点点东西了~~~~

docker run -itd -p 8080:8080 -p 50000:50000 --name jenkins --privileged=true  -v /home/jenkins/src:/var/jenkins_home jenkins2

# composer 操作
composer 项目根目录操作
composer install - 如有 composer.lock 文件，直接安装，否则从 composer.json 安装最新扩展包和依赖；
composer update - 从 composer.json 安装最新扩展包和依赖；
composer update vendor/package - 从 composer.json 或者对应包的配置，并更新到最新；
composer require new/package - 添加安装 new/package, 可以指定版本，如： composer require new/package ~2.5
# composer 替换国内镜像
composer config -g repo.packagistcomposerhttps://packagist.phpcomposer.com

# 本地Curl
D:\phpStudy\php\php-7.0.12-nts\php-cgi.exe -b 127.0.0.1:9001 -c D:\phpStudy\php\php-7.0.12-nts\php.ini


curl -O https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz 
tar zxvf libmemcached-1.0.18.tar.gz
mv libmemcached-1.0.18 memcached
cd memcached
./configure --with-memcached --disable-memcached-sasl
make  &&  make install

# 运行容器安装宝塔
docker run  --name yyxt  -p 8080:443 -p 8889:8888  -v /docker/src:/var/www  -d -it centos  
yum install -y wget && wget -O install.sh http://download.bt.cn/install/install.sh && sh install.sh -y

# 阿里云远程链接数据库 需要在控制面板开启3306端口号

