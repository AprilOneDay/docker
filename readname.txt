docker 启动Mysql
docker run -e MSYQL_ROOT_PASSWORD=admin --name mysql_bname -v /data/mysql/data:/var/lib/mysql -p 3306:3306 -d mysql:5.6

-e MSYQL_ROOT_PASSWORD=admin 初始化mysql数据库root账户 密码
--name mysql_bname 重命名容器名称
-v /data/mysql/data:/var/lib/mysql 将容器/var/lib/mysql 挂载到 /data/mysql/data 
-p 3306:3306 将容器端口映射到本地端口
-d mysql:5.6 启动镜像

docker run -p 80:80 -v /www/:/usr/local/apache2/htdocs/ -v /www/conf/httpd.conf:/usr/local/apache2/conf/httpd.conf -v /usr/local/apache2/logs/ -d httpd


追加CentOS 6.5的epel及remi源。

# rpm -Uvh http://ftp.iij.ad.jp/pub/linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
# rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
以下是CentOS 7.0的源。

yum install epel-release
rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm

通过Dockerfile 生成 apache + php + mysql

docker build -t server:v2 github.com/AprilOneDay/docker_php

docker build -t php:v1 github.com/AprilOneDay/docker_php

docker run -d --name test_apache-php  -e MYSQL_ADDR=74.121.150.93:3306 -p 80:80 server:v1

想要删除untagged images，也就是那些id为<None>的image的话可以用

docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
docker rmi $(docker images -q)

关闭所有正在运行容器
docker ps | awk  '{print $1}' | xargs docker stop
docker rm $(docker ps -a -q)
docker rmi docker_nginx

docker stop test_apache-php
docker rm test_apache-php
docker port  test_apache-php 80
docker exec -it test_apache-php /bin/bash
docker exec -it php /bin/bash
docker exec -it httpd /bin/bash
docker exec -it mysql /bin/bash
docker exec -it nginx /bin/bash

mysql -uroot  -p1q2w3e4r
mysql -h172.17.0.2 -P3306 -uroot  -p1q2w3e4r
mysql -h74.121.150.93 -P3306 -uroot  -p1q2w3e4r
select database();

cd /
cd var/www/html
vi index.php

docker cp apache2:/root/etc//local/apache2/conf/httpd.conf ~/www/apache2/conf/httpd.conf
docker cp apache2:/usr/local/apache2/logs/ ~/www/apache2/logs
docker cp apache2:/usr/local/apache2/htdocs/ ~/www/src

docker cp php:/usr/local/php ~/www/src
docker cp apache:/usr/local/apache2/ ~/www/
docker cp mysql:/etc/mysql/ ~/www/
docker cp mysql:/var/lib/mysql ~/www/data/
docker cp nginx:/etc/nginx ~/docker/nginx/

docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7

#查看Linux系统版本的命令
cat /etc/issue
uname -a


安装Docker Compose

curl -L https://github.com/docker/compose/releases/download/1.4.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod  +x /usr/local/bin/docker-compose

#docker-compose版本
docker-compose version

su -c "setenforce 0"
docker ps | awk  '{print $1}' | xargs docker stop
docker rm $(docker ps -a -q)
docker rmi docker_mysql
cd
rm -rf docker 
git clone https://github.com/AprilOneDay/docker.git
cd docker
docker-compose up 
docker-compose up -d
docker exec -it php /bin/bash
chmod -R 777 /var/www/html/data
chmod -R 777 /var/www/html/public/uploadfile

docker ps | awk  '{print $1}' | xargs docker stop
docker rm $(docker ps -a -q)
cd
cd docker
git pull
docker-compose up -d
docker exec -it php /bin/bash
chmod -R 777 /var/www/html/data
chmod -R 777 /var/www/html/public/uploadfile
exit
# 修改mysql密码
docker exec -it mysql /bin/bash
mysql -usiyue -p1qq2ww3ee4rr
use  mysql;
update  user  set  authentication_string  =  password('siyue1q2w3e4r') where  user='siyue';
update  user  set  user  =  'siyue' where  user='root';
exit;exit;
docker restart mysql;

docker-compose up -d
docker exec -it mysql /bin/bash
mysqldump -hlocalhost -usiyuework -pcheng6251 --databases blog > /usr/local/work/blog.sql

cd docker 
git pull
docker-compose up


俺的centos vps上面不知道添加了多少个账户，今天想清理一下，但是以前还未查看过linux用户列表，google了一下，找到方便的放：
一般情况下是

cat /etc/passwd 可以查看所有用户的列表
w 可以查看当前活跃的用户列表
cat /etc/group 查看用户组

但是这样出来的结果一大堆，看起来嘿负责，于是继续google
找到个简明的layout命令

cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F":" '{ print $1"|"$3"|"$4 }'|more

这样一来，show出来的就只是用户列表和一点点东西了~~~~